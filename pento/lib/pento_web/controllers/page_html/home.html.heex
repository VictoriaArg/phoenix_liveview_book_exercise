<.flash_group flash={@flash} />
<%= if !@current_user do %>
  <div class="flex flex-col md:flex-row relative">
    <img
      class="hidden lg:block absolute -top-[5.5rem] -left-[12rem] -rotate-2 transition-opacity duration-500 opacity-0"
      src="https://liveviewprojectbucket.s3.amazonaws.com/images/decoration.png"
      onload="this.style.opacity=1;"
    />
    <div class="bg-highlight-500 h-auto md:h-screen w-screen md:w-[50%] flex flex-col items-center justify-center p-6 md:p-16">
      <p class="text-xl -mb-6">Welcome to</p>
      <p class="font-cooper-black text-7xl mt-1">Pento</p>
      <p class="text-xl w-[80%] mb-2">
        This is a website created by <.link
          class="link-primary"
          navigate="https://github.com/VictoriaArg"
        >Victoria Arga√±aras</.link>, based on the excercises from the book
        <.link
          class="link-info"
          navigate="https://pragprog.com/titles/liveview/programming-phoenix-liveview/"
        >
          Programming Phoenix LiveView
        </.link>
        by Bruce A. Tate and Sophie De Benedetto. <br />
        You can check the <.link
          class="link-secondary"
          navigate="https://github.com/VictoriaArg/phoenix_liveview_book_exercise"
        >source code here </.link>.
      </p>
    </div>
    <div class="md:h-screen w-screen md:w-[50%] flex flex-col items-center md:items-start justify-center p-6 md:p-16">
      <p class="text-center md:text-left text-lg md:text-xl mb-8 underline underline-offset-2">
        To wander around you will need an account.
      </p>

      <div class="flex flex-col lg:flex-row items-center justify-center lg:justify-normal mb-4 md:mb-8 w-[80%] md:w-auto">
        <.button
          aria-label="Register as a new user"
          type="link"
          navigate={~p"/users/register"}
          size="large"
          class="w-fit mb-8 lg:mb-0 lg:mr-8"
        >
          Register here
        </.button>
        <p class="text-xs lg:text-base w-[80%] md:w-auto text-center md:text-left">
          Please remember this is just a demo application, for security reasons don't use your real information.
        </p>
      </div>
      <p class="text-center lg:text-left">
        Already signed up?
        <.link navigate={~p"/users/log_in"} class="link-secondary ml-2 font-medium">
          Log in here
        </.link>
      </p>
    </div>
  </div>
<% else %>
  <div>
    <.main_title>Features by chapters</.main_title>
    <.list>
      <:item title="Chapters 1 and 2: Boilerplate and authentication">
        <p class="inline">
          Generation of base code with commands<.code>mix phx.new pento</.code>and<.code>
            mix phx.gen.auth
          </.code>.
          These chapters dive deep into the details of every piece of the generated code and discuss the philosophy of each layer.
          The first feature created is the <.link class="link-primary" href={~p"/guess"}>guess game</.link>.
        </p>
      </:item>
      <:item title="Chapters 3: Generators for contexts and schemas">
        <p class="inline">
          Creation of the catalog context with<.code>mix phx.gen.context</.code>. Liveviews for the
          <.link class="link-primary" href={~p"/products/new"}>products CRUD</.link>
          were
          created with<.code>mix phx.gen.live</.code>. This chapter also focuses on the concepts of core and boundary.
          The core layer contains code tat is certain and behaves predictably. The boundary layer or context, represents code that
          can potentially fail.
        </p>
      </:item>
      <:item title="Chapters 4: Live views and templates">
        <p class="inline">
          This chapter covers the web side of the
          <.code>phx.gen.live</.code>
          generator, including the LiveView lifecycle, templates,
          and all around of the supporting user interface code. The CRUD for products is extended with the
          <.link class="link-primary" href={~p"/products"}>products list.</.link>
        </p>
      </:item>
      <:item title="Chapters 5: Forms and changesets">
        <p class="inline">
          The product schema is completed with an image field, and creation and edition of new products validate errors that are displayed
          on forms accordingly. In this chapter the
          <.link class="link-primary" href={~p"/promo"}>promo code</.link>
          section is developed to also learn about schemaless changesets.
        </p>
      </:item>
      <:item title="Chapters 6: Function components">
        <p class="inline">
          Creation of the user survey along with many reusable functional components. Eventhough this chapter is quite short, the activities
          let you combine everything previously learned for the
          <.link class="link-primary" href={~p"/survey"}>demographics and products survey.</.link>
        </p>
      </:item>
      <:item title="Chapters 7: Live components">
        <p class="inline">
          Use of statefull components to let our users interact with pieces of the survey by tying common state to events.
          Communication between liveviews and live components. Extension of the demographic schema.
        </p>
      </:item>
      <:item title="Chapters 8: Building an interactive dashboard">
        <p class="inline">
          This chapter explains how to make of Phoenix Prescence to track users visiting products. To see
          this feature working open one tab on the
          <.link class="link-primary" href={~p"/dashboard"}>survey results view</.link>
          and another one visiting a
          <.link class="link-primary" href={~p"/products/1"}> product detail view.</.link>
          Another feature developed is a chart for users rating of products. All the queries needed for these features are
          also developed in this chapter.
        </p>
      </:item>
      <:item title="Chapters 9: Real-time survey results with PubSub">
        <p class="inline">
          One of the most entretaining chapters so far. Explains how to dinamically render the chart for users rating of products,
          so that with every new rating the chart gets updated in real time. To see
          this feature working open two tabs, one at the Survey Results view, and other at the user survey view.
          You will see the chart updated without refreshing the tab after submitting the products ratings form.
        </p>
      </:item>
    </.list>
  </div>
<% end %>
